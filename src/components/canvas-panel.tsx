"use client";

import { useState, useEffect, useCallback } from "react";
import { Button } from "ui/button";
import { Badge } from "ui/badge";
import {
  X,
  Minimize2,
  BarChart3,
  FileText,
  Code,
  Image as ImageIcon
} from "lucide-react";
import { cn } from "lib/utils";
import { motion, AnimatePresence } from "framer-motion";
import { BarChart } from "./tool-invocation/bar-chart";
import { LineChart } from "./tool-invocation/line-chart";
import { PieChart } from "./tool-invocation/pie-chart";
import { DashboardCanvas } from "./canvas/dashboard-canvas";

interface CanvasArtifact {
  id: string;
  type: "chart" | "dashboard" | "code" | "text" | "image" | "data";
  title: string;
  data?: any;
  content?: string;
  status?: "loading" | "completed" | "error";
  metadata?: {
    chartType?: string;
    dataPoints?: number;
    charts?: number;
    lastUpdated?: string;
  };
}

interface CanvasPanelProps {
  isVisible: boolean;
  onClose: () => void;
  artifacts: CanvasArtifact[];
  activeArtifactId?: string;
  onArtifactSelect?: (id: string) => void;
  canvasName?: string;
  isIntegrated?: boolean;
}

// Loading placeholder component
function LoadingPlaceholder({ artifact }: { artifact: CanvasArtifact }) {
  return (
    <div className="h-full flex items-center justify-center">
      <div className="text-center space-y-3">
        <div className="animate-spin">
          <BarChart3 className="w-8 h-8 mx-auto text-muted-foreground" />
        </div>
        <div className="space-y-1">
          <p className="text-sm font-medium">Creating {artifact.type}...</p>
          <p className="text-xs text-muted-foreground">{artifact.title}</p>
        </div>
        <div className="flex space-x-1 justify-center">
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse delay-75"></div>
          <div className="w-2 h-2 bg-primary rounded-full animate-pulse delay-150"></div>
        </div>
      </div>
    </div>
  );
}

// Chart renderer component
function ChartRenderer({ artifact }: { artifact: CanvasArtifact }) {
  if (artifact.status === "loading") {
    return <LoadingPlaceholder artifact={artifact} />;
  }

  if (!artifact.data) {
    return (
      <div className="h-full flex items-center justify-center text-muted-foreground">
        <div className="text-center">
          <BarChart3 className="w-12 h-12 mx-auto mb-4 opacity-50" />
          <p>No chart data available</p>
        </div>
      </div>
    );
  }

  const { chartType, title, data, description, yAxisLabel } = artifact.data;

  const chartProps = {
    title: title || artifact.title,
    data: data || [],
    description,
    yAxisLabel
  };

  // Add sizing wrapper for all charts
  const chartContent = (() => {
    switch (chartType) {
      case "bar":
        return <BarChart {...chartProps} />;
      case "line":
        return <LineChart {...chartProps} />;
      case "pie":
        // Transform data for pie chart
        const pieData = data?.map((point: any) => ({
          label: point.xAxisLabel,
          value: point.series[0]?.value || 0
        })) || [];
        return <PieChart title={chartProps.title} data={pieData} description={description} />;
      default:
        return <BarChart {...chartProps} />;
    }
  })();

  return (
    <div className="h-full w-full flex flex-col">
      {chartContent}
    </div>
  );
}

// Empty state component
function CanvasEmptyState() {
  return (
    <div className="h-full flex items-center justify-center">
      <div className="text-center space-y-4 max-w-sm">
        <div className="mx-auto w-16 h-16 rounded-lg bg-muted flex items-center justify-center">
          <BarChart3 className="w-8 h-8 text-muted-foreground" />
        </div>
        <div>
          <h3 className="font-semibold text-lg mb-2">Canvas Ready</h3>
          <p className="text-muted-foreground text-sm leading-relaxed">
            Artifacts like charts, documents, and visualizations will appear here when generated by AI.
          </p>
        </div>
        <div className="text-xs text-muted-foreground space-y-1">
          <p>Try asking for:</p>
          <div className="space-y-1">
            <p>‚Ä¢ &ldquo;Create a chart showing...&rdquo;</p>
            <p>‚Ä¢ &ldquo;Generate a document about...&rdquo;</p>
            <p>‚Ä¢ &ldquo;Visualize the data...&rdquo;</p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Main Canvas Panel Component
export function CanvasPanel({
  isVisible,
  onClose,
  artifacts,
  activeArtifactId,
  onArtifactSelect: _onArtifactSelect,
  canvasName = "Canvas",
  isIntegrated = false
}: CanvasPanelProps) {
  const [isMinimized, setIsMinimized] = useState(false);

  // Remove tab-based logic - we'll show all charts in grid

  console.log("üé≠ CanvasPanel Debug: Render check - isVisible:", isVisible, "artifacts:", artifacts.length, "activeArtifactId:", activeArtifactId);

  if (!isVisible) {
    console.log("‚ùå CanvasPanel Debug: Not rendering - isVisible is false");
    return null;
  }

  console.log("‚úÖ CanvasPanel Debug: Rendering canvas panel");

  // Use different styling for integrated vs floating
  const containerClasses = isIntegrated
    ? "h-full bg-background border-l border-border"
    : "fixed right-0 top-0 h-full w-[45vw] min-w-[500px] max-w-[700px] z-50 bg-background border-l border-border shadow-2xl";

  const content = (
    <div className={containerClasses}>
      <div className="h-full flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-border bg-muted/30">
          <div className="flex items-center space-x-2">
            <h2 className="font-semibold text-lg">{canvasName}</h2>
            {artifacts.length > 0 && (
              <Badge variant="secondary" className="text-xs">
                {artifacts.length}
              </Badge>
            )}
          </div>

          <div className="flex items-center space-x-1">
            {!isIntegrated && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMinimized(!isMinimized)}
                className="h-8 w-8 p-0"
              >
                <Minimize2 className="w-4 h-4" />
              </Button>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                console.log("üö™ Canvas Debug: Close button clicked");
                onClose();
              }}
              className="h-8 w-8 p-0"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Clean minimal separator */}
        {artifacts.length > 0 && !isMinimized && (
          <div className="border-b border-border/10"></div>
        )}

        {/* Content Area - CSS Grid Layout */}
        <div className="flex-1 overflow-auto">
          {isMinimized ? (
            <div className="p-4 text-center text-muted-foreground">
              <p className="text-sm">Canvas minimized</p>
            </div>
          ) : artifacts.length > 0 ? (
            <div className="h-full p-4">
              {/* Clean CSS Grid - Vercel AI SDK Style */}
              <div className={cn(
                "grid gap-6 h-full p-4",
                // Responsive grid based on number of charts
                artifacts.length === 1 && "grid-cols-1",
                artifacts.length === 2 && "grid-cols-2",
                artifacts.length === 3 && "grid-cols-1 lg:grid-cols-2",
                artifacts.length === 4 && "grid-cols-2",
                artifacts.length >= 5 && "grid-cols-2 xl:grid-cols-3"
              )}>
                {artifacts.map((artifact, index) => (
                  <div
                    key={`chart-${artifact.id}`}
                    className="bg-card/30 border border-border/20 rounded-2xl overflow-hidden min-h-[400px] flex flex-col"
                  >
                    {artifact.status === "loading" ? (
                      <LoadingPlaceholder artifact={artifact} />
                    ) : artifact.type === "chart" ? (
                      <ChartRenderer artifact={artifact} />
                    ) : null}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <CanvasEmptyState />
          )}
        </div>
      </div>
    </div>
  );

  // Return with or without animation based on integration mode
  if (isIntegrated) {
    return content;
  }

  return (
    <AnimatePresence>
      <motion.div
        initial={{ x: "100%", opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        exit={{ x: "100%", opacity: 0 }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
      >
        {content}
      </motion.div>
    </AnimatePresence>
  );
}

// Generate smart canvas name based on chart content
function generateCanvasName(artifacts: CanvasArtifact[]): string {
  if (artifacts.length === 0) return "Canvas";

  const chartTitles = artifacts.map(a => a.title.toLowerCase());

  // Analyze chart titles for common themes
  const keywords = chartTitles.join(" ");

  if (keywords.includes("sales") || keywords.includes("revenue") || keywords.includes("financial")) {
    return "Sales & Finance Dashboard";
  } else if (keywords.includes("market") && keywords.includes("global")) {
    return "Global Market Analytics";
  } else if (keywords.includes("population") || keywords.includes("global") || keywords.includes("world")) {
    return "World Data Dashboard";
  } else if (keywords.includes("performance") || keywords.includes("analytics")) {
    return "Performance Analytics";
  } else if (keywords.includes("user") || keywords.includes("traffic") || keywords.includes("engagement")) {
    return "User Analytics Dashboard";
  } else if (artifacts.length > 3) {
    return "Multi-Chart Dashboard";
  } else {
    return "Data Visualization";
  }
}

// Export simple canvas hook for managing canvas state
export function useCanvas() {
  const [isVisible, setIsVisible] = useState(false);
  const [artifacts, setArtifacts] = useState<CanvasArtifact[]>([]);
  const [activeArtifactId, setActiveArtifactId] = useState<string>();

  // Generate canvas name based on current artifacts
  const canvasName = generateCanvasName(artifacts);

  const addArtifact = useCallback((artifact: CanvasArtifact) => {
    console.log("üöÄ useCanvas Debug: addArtifact called with:", artifact);

    // Use functional updates to ensure all state changes happen synchronously
    setArtifacts(prev => {
      const existing = prev.find(a => a.id === artifact.id);
      if (existing) {
        // Update existing artifact
        const updated = prev.map(a => a.id === artifact.id ? { ...a, ...artifact } : a);
        console.log("üìä useCanvas Debug: Updated existing artifact:", artifact.id);
        return updated;
      } else {
        // Add new artifact
        const newArtifacts = [...prev, artifact];
        console.log("üìä useCanvas Debug: New artifacts array:", newArtifacts.length, "items");
        return newArtifacts;
      }
    });

    setActiveArtifactId(artifact.id);
    console.log("üéØ useCanvas Debug: Setting active artifact ID:", artifact.id);

    // Always show canvas when new artifact is added
    setIsVisible(true);
    console.log("‚úÖ useCanvas Debug: Setting isVisible to true - canvas should now be visible");
  }, []);

  const addLoadingArtifact = useCallback((artifact: Omit<CanvasArtifact, 'status'>) => {
    console.log("üîÑ useCanvas Debug: addLoadingArtifact called with:", artifact);
    const loadingArtifact = { ...artifact, status: "loading" as const };
    addArtifact(loadingArtifact);
  }, [addArtifact]);

  const updateArtifact = useCallback((id: string, updates: Partial<CanvasArtifact>) => {
    console.log("üîÑ useCanvas Debug: updateArtifact called with:", id, updates);
    setArtifacts(prev =>
      prev.map(artifact =>
        artifact.id === id ? { ...artifact, ...updates } : artifact
      )
    );
  }, []);

  const removeArtifact = useCallback((id: string) => {
    console.log("üóëÔ∏è useCanvas Debug: removeArtifact called with ID:", id);
    setArtifacts(prev => {
      const filtered = prev.filter(a => a.id !== id);
      console.log("üìä useCanvas Debug: Artifacts after removal:", filtered.length);
      if (filtered.length === 0) {
        console.log("üôà useCanvas Debug: Last artifact removed, hiding canvas");
        setIsVisible(false); // Hide if last artifact
      }
      return filtered;
    });
  }, []);

  const closeCanvas = useCallback(() => {
    console.log("‚ùå useCanvas Debug: closeCanvas called");
    setIsVisible(false);
  }, []);

  const showCanvas = useCallback(() => {
    console.log("üëÅÔ∏è useCanvas Debug: showCanvas called");
    setArtifacts(prev => {
      console.log("üîç useCanvas Debug: Current artifacts:", prev.length);
      if (prev.length > 0) {
        setIsVisible(true);
        console.log("‚úÖ useCanvas Debug: Canvas shown (artifacts available)");
      } else {
        console.log("‚ö†Ô∏è useCanvas Debug: Cannot show canvas - no artifacts available");
      }
      return prev; // Don't change artifacts
    });
  }, []);

  // Listen for show canvas events - using useCallback to prevent stale closures
  useEffect(() => {
    const handleShow = () => {
      console.log("üîä useCanvas Debug: Received canvas:show event");
      setArtifacts(prev => {
        if (prev.length > 0) {
          console.log("‚úÖ useCanvas Debug: Showing Canvas - artifacts available");
          setIsVisible(true);
        } else {
          console.log("‚ö†Ô∏è useCanvas Debug: Ignoring show event - no artifacts available");
        }
        return prev; // Don't change artifacts
      });
    };

    console.log("üîß useCanvas Debug: Setting up canvas:show event listener in hook");
    window.addEventListener('canvas:show', handleShow);
    return () => {
      console.log("üßπ useCanvas Debug: Cleaning up canvas:show event listener in hook");
      window.removeEventListener('canvas:show', handleShow);
    };
  }, []); // Remove artifacts dependency to prevent stale closure issues

  // Debug state changes
  useEffect(() => {
    console.log("üîÑ useCanvas Debug: State changed - isVisible:", isVisible, "artifacts:", artifacts.length, "activeId:", activeArtifactId);
  }, [isVisible, artifacts.length, activeArtifactId]);

  return {
    isVisible,
    artifacts,
    activeArtifactId,
    canvasName,
    addArtifact,
    addLoadingArtifact,
    updateArtifact,
    removeArtifact,
    closeCanvas,
    showCanvas,
    setActiveArtifactId
  };
}